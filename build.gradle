plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

allprojects {
    apply from: rootProject.file('extras.gradle')

    group GROUP
    version VERSION

    repositories {
        mavenCentral()
    }
}

subprojects {
    buildDir = rootProject.file("build/${project.name}")
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

task castleSources(type: Jar, dependsOn: subprojects.classes) {
    archiveBaseName.set('castle')
    destinationDirectory.set(rootProject.buildDir)
    archiveClassifier.set('sources')

    from files(subprojects.collect {
        it.sourceSets.main.allSource
    })
}

task castleJavadoc(type: Jar, dependsOn: subprojects.javadoc) {
    archiveBaseName.set('castle')
    destinationDirectory.set(rootProject.buildDir)
    archiveClassifier.set('javadoc')

    from files(subprojects.collect {
        it.javadoc.destinationDir
    })
}

task castle(type: Jar, dependsOn: subprojects.assemble) {
    dependsOn castleSources
    dependsOn castleJavadoc

    archiveBaseName.set('castle')
    destinationDirectory.set(rootProject.buildDir)

    from files(subprojects.collect {
        it.sourceSets.main.output
    })
}

task castleAll(type: Jar, dependsOn: castle) {
    dependsOn castleSources
    dependsOn castleJavadoc

    archiveFileName.set('castle-all.jar')
    destinationDirectory.set(rootProject.buildDir)

    from files(subprojects.collect {
        it.sourceSets.main.output
    })
    from files(subprojects.collect {
        it.sourceSets.main.allSource
    })
    from files(subprojects.collect {
        it.javadoc.destinationDir
    })
}

publishing {
    publications {
        mavenCastle(MavenPublication) {
            artifactId = ARTIFACT_ID

            artifact castle
            artifact castleJavadoc
            artifact castleSources

            pom {
                name = 'Castle'
                description = "A generic utility library"
                url = 'https://github.com/tomtzook/Castle'

                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id = 'tomtzook'
                        name = 'Tom Tzook'
                        email = 'tomtzook@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/tomtzook/Castle.git'
                    developerConnection = 'scm:git:ssh://github.com/tomtzook/Castle.git'
                    url = 'https://github.com/tomtzook/Castle'
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def allDependencies = []

                    subprojects.each { project ->
                        allDependencies.addAll(project.configurations.implementation.allDependencies.withType(ExternalDependency))
                    }

                    def comparator = [
                            compare: { first, second ->
                                if (first.group != second.group)
                                    return first.group.compareTo(second.group)
                                else
                                    return first.name.compareTo(second.name)
                            }
                    ] as Comparator

                    allDependencies.collect().unique(comparator).each { dep ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if (isReleaseBuild()) {
                name = 'NexusStaging'
                url = NEXUS_RELEASE_REPOSITORY_URL
            } else {
                name = 'NexusSnapshot'
                url = NEXUS_SNAPSHOT_REPOSITORY_URL
            }

            credentials {
                username getNexusUsername()
                password getNexusPassword()
            }
        }
    }
}

if (shouldSign()) {
    signing {
        sign publishing.publications.mavenCastle
    }
}